#!/bin/sh

# set shell variables
hostlist="{{ drift_hostlist }}"
receiver="{{ drift_receiver }}"
branch="{{ drift_branch }}"
message="has drifted away"
excluded_tags={{ drift_excluded_tags }}
{% if drift_encrypt_mails  %}pubkey=~/pubkey.asc{% endif %}

# set environment variable
export ANSIBLE_DEPRECATION_WARNINGS=no
export ANSIBLE_COMMAND_WARNINGS=no
export ANSIBLE_DISPLAY_OK_HOSTS=no
export ANSIBLE_DISPLAY_SKIPPED_HOSTS=no

# check argument and construct vars
if [ $# -ne 1 ]; then
  echo "usage: ansible-drift playbook.yml"
  exit 1
fi

dir="$(dirname $1)"
playbook="$(basename $1)"

cd "$dir" || exit 1

{% if drift_encrypt_mails  %}
# check if pgp key is valid
inspect=$(sq inspect $pubkey)
if [ $? -ne 0 ]; then
    echo "mails should be encrypted, but $pubkey is malformed\n" | mail -s "[ansible-drift] Malformed PGP pubkey" $receiver
    exit 1
fi
invalid=$(echo $inspect | grep -i invalid)
if [ $invalid -ne 1 ]; then
    msg="mails should be encrypted, but $pubkey is invalid\n" | mail -s "[ansible-drift] Invalid PGP pubkey" $receiver
    exit 1
fi
{% endif %}

# make sure we're on the latest commit
if [ -n "$branch" ]; then
  git pull --quiet --ff-only $branch
  git submodule update --init --recursive --quiet

  if [ -f requirements.yml ]; then
    ansible-galaxy install -r requirements.yml --force >/dev/null 2>&1
  fi

  message="$message from $branch"
fi

# test every host individually
# if there is drift send it via mail

for h in $hostlist; do
  body="$(ansible-playbook --flush-cache $playbook --limit $h --check --diff{% if drift_excluded_tags|length > 0 %} --skip-tags $excluded_tags{% endif %})"
  if [ -n "$body" ]; then
    echo "$body" | {% if drift_encrypt_mails  %} sq encrypt --recipient-cert $pubkey |{% endif %} mail -s "[ansible-drift] $h $message" $receiver
  fi
done
